generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model VerifyCode {
  id        String   @id @default(cuid())
  cid       String   @unique
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String        @id @default(cuid())
  cid       String        @unique
  name      String
  email     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  Account   Account[]
  Session   Session[]
  courses   UserCourse[]
  sections  UserSection[]
}

model Course {
  id        String       @id @default(cuid())
  title     String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  sections  Section[]
  users     UserCourse[]
}

model Section {
  id        String        @id @default(cuid())
  courseId  String
  title     String
  link      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  course    Course        @relation(fields: [courseId], references: [id])
  users     UserSection[]
}

model UserCourse {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, courseId])
}

model UserSection {
  id        String   @id @default(cuid())
  userId    String
  sectionId String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  section   Section  @relation(fields: [sectionId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? 
  accessToken       String? 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
